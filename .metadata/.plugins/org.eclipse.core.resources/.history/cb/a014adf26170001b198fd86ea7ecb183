package org.zerock.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.zerock.domain.BoardVO;
import org.zerock.domain.Criteria;
import org.zerock.domain.PageDTO;
import org.zerock.service.BoardService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@Log4j
@RequestMapping("/board/*")
@AllArgsConstructor
public class BoardController {
	private BoardService service;
	
	/*10.2.1 목록에 대한 처리와 테스트 */
	/*
	 * @GetMapping("/list") public void list(Model model) { log.info("list");
	 * model.addAttribute("list",service.getList()); }
	 */
	/*13.2.2 Criteria 파라미터로 추가*/
	@GetMapping("/list")
	public void list(Criteria cri, Model model) {
		log.info("list : "+cri);
		model.addAttribute("list",service.getList(cri));
		/*ch14.2 to use PageDTO */
		/* model.addAttribute("pageMaker", new PageDTO(cri,123)); *///123 is total i guess.\
		
		/*ch14.6 실제 total */
		int total = service.getTotal(cri);
		
		log.info("total: "+total);
		
		model.addAttribute("pageMaker", new PageDTO(cri,total));
	}
	
	
	/*10.2.2 등록 처리와 테스트*/
	@PostMapping("/register")
	public String register(BoardVO board, RedirectAttributes rttr) {
		log.info("register : "+board);
		service.register(board);
		rttr.addFlashAttribute("result",board.getBno());
		
		return "redirect:/board/list";
	}
	/*11.3 등록 입력 페이지와 등록 처리*/
	@GetMapping("/register")
	public void registerGET() {
		log.info("registerGet");
	}
	
	/*10.2.3 조회 처리와 테스트*/ /*11.4 조회*/ /*11.5 게시물 수정/삭제 처리를 위한 URL 배열 처리 실습 */
	/* @GetMapping("/get") */
	@GetMapping({"/get","/modify"})
	public void get(@RequestParam("bno") Long bno, @ModelAttribute("cri") Criteria cri ,Model model) { //ch14 추가
		log.info("/get or /modify");
		model.addAttribute("board", service.get(bno));
	}

	/*10.2.4 수정 처리와 테스트*/
	/*14.5 수정과 삭제 paging 처리*/
	@PostMapping("/modify")
	public String modify(BoardVO board, @ModelAttribute("cri") Criteria cri, RedirectAttributes rttr) {
		log.info("modify: " + board);
		if(service.modify(board)) {
			rttr.addFlashAttribute("result", "success");
		}
		/*14.5*/
		rttr.addAttribute("pageNum",cri.getPageNum());
		rttr.addAttribute("amount",cri.getAmount());
		
		/*ch15.4 redirect 속성에 추가 */
		rttr.addAttribute("type",cri.getAmount());
		rttr.addAttribute("keyword",cri.getAmount());
		return "redirect:/board/list";
	}
	/*10.2.5 삭제 처리와 테스트 */
	@PostMapping("/remove")
	public String remove(@RequestParam("bno") Long bno,@ModelAttribute("cri") Criteria cri ,RedirectAttributes rttr) {
		log.info("remove..." + bno);
		if(service.remove(bno)) {
			rttr.addFlashAttribute("result", "success"); //list.jsp 로간다
		}
		/*14.5*/
		rttr.addAttribute("pageNum",cri.getPageNum());
		rttr.addAttribute("amount",cri.getAmount());
		
		/*ch15.4 redirect 속성에 추가 */
		rttr.addAttribute("type",cri.getAmount());
		rttr.addAttribute("keyword",cri.getAmount());
		
		return "redirect:/board/list";
	}

}
